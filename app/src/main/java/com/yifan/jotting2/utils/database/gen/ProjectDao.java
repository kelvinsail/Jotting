package com.yifan.jotting2.utils.database.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yifan.jotting2.pojo.Project;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECT".
*/
public class ProjectDao extends AbstractDao<Project, Long> {

    public static final String TABLENAME = "PROJECT";

    /**
     * Properties of entity Project.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProjectType = new Property(1, int.class, "projectType", false, "PROJECT_TYPE");
        public final static Property ProjectName = new Property(2, String.class, "projectName", false, "PROJECT_NAME");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property TotalMoney = new Property(4, double.class, "totalMoney", false, "TOTAL_MONEY");
        public final static Property StartTime = new Property(5, long.class, "startTime", false, "START_TIME");
        public final static Property ModifyTime = new Property(6, long.class, "modifyTime", false, "MODIFY_TIME");
        public final static Property IsEnded = new Property(7, boolean.class, "isEnded", false, "IS_ENDED");
    };


    public ProjectDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PROJECT_TYPE\" INTEGER NOT NULL ," + // 1: projectType
                "\"PROJECT_NAME\" TEXT," + // 2: projectName
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"TOTAL_MONEY\" REAL NOT NULL ," + // 4: totalMoney
                "\"START_TIME\" INTEGER NOT NULL ," + // 5: startTime
                "\"MODIFY_TIME\" INTEGER NOT NULL ," + // 6: modifyTime
                "\"IS_ENDED\" INTEGER NOT NULL );"); // 7: isEnded
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Project entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProjectType());
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(3, projectName);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
        stmt.bindDouble(5, entity.getTotalMoney());
        stmt.bindLong(6, entity.getStartTime());
        stmt.bindLong(7, entity.getModifyTime());
        stmt.bindLong(8, entity.getIsEnded() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Project entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProjectType());
 
        String projectName = entity.getProjectName();
        if (projectName != null) {
            stmt.bindString(3, projectName);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
        stmt.bindDouble(5, entity.getTotalMoney());
        stmt.bindLong(6, entity.getStartTime());
        stmt.bindLong(7, entity.getModifyTime());
        stmt.bindLong(8, entity.getIsEnded() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Project readEntity(Cursor cursor, int offset) {
        Project entity = new Project( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // projectType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // projectName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.getDouble(offset + 4), // totalMoney
            cursor.getLong(offset + 5), // startTime
            cursor.getLong(offset + 6), // modifyTime
            cursor.getShort(offset + 7) != 0 // isEnded
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Project entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProjectType(cursor.getInt(offset + 1));
        entity.setProjectName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotalMoney(cursor.getDouble(offset + 4));
        entity.setStartTime(cursor.getLong(offset + 5));
        entity.setModifyTime(cursor.getLong(offset + 6));
        entity.setIsEnded(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Project entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Project entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
