package com.yifan.jotting2.utils.database.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yifan.jotting2.pojo.ActionAssigns;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACTION_ASSIGNS".
*/
public class ActionAssignsDao extends AbstractDao<ActionAssigns, Long> {

    public static final String TABLENAME = "ACTION_ASSIGNS";

    /**
     * Properties of entity ActionAssigns.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ActionID = new Property(1, Long.class, "actionID", false, "ACTION_ID");
        public final static Property CompanionID = new Property(2, Long.class, "companionID", false, "COMPANION_ID");
        public final static Property PayMoney = new Property(3, double.class, "payMoney", false, "PAY_MONEY");
        public final static Property CompanionName = new Property(4, String.class, "companionName", false, "COMPANION_NAME");
    }


    public ActionAssignsDao(DaoConfig config) {
        super(config);
    }
    
    public ActionAssignsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACTION_ASSIGNS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ACTION_ID\" INTEGER," + // 1: actionID
                "\"COMPANION_ID\" INTEGER," + // 2: companionID
                "\"PAY_MONEY\" REAL NOT NULL ," + // 3: payMoney
                "\"COMPANION_NAME\" TEXT);"); // 4: companionName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACTION_ASSIGNS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ActionAssigns entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long actionID = entity.getActionID();
        if (actionID != null) {
            stmt.bindLong(2, actionID);
        }
 
        Long companionID = entity.getCompanionID();
        if (companionID != null) {
            stmt.bindLong(3, companionID);
        }
        stmt.bindDouble(4, entity.getPayMoney());
 
        String companionName = entity.getCompanionName();
        if (companionName != null) {
            stmt.bindString(5, companionName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ActionAssigns entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long actionID = entity.getActionID();
        if (actionID != null) {
            stmt.bindLong(2, actionID);
        }
 
        Long companionID = entity.getCompanionID();
        if (companionID != null) {
            stmt.bindLong(3, companionID);
        }
        stmt.bindDouble(4, entity.getPayMoney());
 
        String companionName = entity.getCompanionName();
        if (companionName != null) {
            stmt.bindString(5, companionName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ActionAssigns readEntity(Cursor cursor, int offset) {
        ActionAssigns entity = new ActionAssigns( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // actionID
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // companionID
            cursor.getDouble(offset + 3), // payMoney
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // companionName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ActionAssigns entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setActionID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCompanionID(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setPayMoney(cursor.getDouble(offset + 3));
        entity.setCompanionName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ActionAssigns entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ActionAssigns entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ActionAssigns entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
